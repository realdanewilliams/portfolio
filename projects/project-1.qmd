---
title: "Country Guesser"
date: "2024-09-15"
categories: [GitHub, Vercel, Claude Code]
---

## Overview

A modern geography game where players identify countries from authentic outlines. Features real country shapes from mapsicon repository and an interactive 3D Earth globe powered by D3.js.

## Live Product Demo

<div class="d-flex justify-content-center gap-3 my-4">
  <!-- Open App button -->
  <a class="btn btn-primary d-inline-flex align-items-center"
     href="https://global-country-guesser.vercel.app/"
     target="_blank" rel="noopener"
     aria-label="Open live app">
    <i class="fa-solid fa-window-restore me-2" aria-hidden="true"></i>
    Open App in New Tab
  </a>

  <!-- GitHub Source button -->
  <a class="btn btn-outline-dark d-inline-flex align-items-center"
     href="https://github.com/realdanewilliams/country-guesser"
     target="_blank" rel="noopener"
     aria-label="Open GitHub source">
    <i class="fa-brands fa-github me-2" aria-hidden="true"></i>
    View source on GitHub
  </a>
</div>

<iframe src="https://global-country-guesser.vercel.app/"
        style="width:100%; height:900px; border:none;"
        allowfullscreen>
</iframe>

## Technical Details

Framework/Stack: Next.js, TypeScript, Tailwind, React

Deployment: GitHub Pages + Vercel

Tools Used:
-   Claude Code

## Product Requirements Document

PRD – Country Outline Game
1. Overview

A browser-based geography game where players must guess the correct country based on its outline. Built with Next.js and TypeScript, the app challenges users to identify countries within a limited number of guesses while providing hints like directional arrows, distance feedback, and visual indicators on a globe.

The game is designed to be simple, fun, and educational—ideal for casual players, students, or geography enthusiasts.

2. Objectives

Make geography learning engaging and competitive.

Provide immediate feedback (distance, direction, heatmap).

Keep the experience lightweight and fast, playable in the browser.

Create replayability with randomized countries each round.

3. Core Features
3.1 Game Loop

User is shown a random country outline in the center of the screen.

User inputs a guess (via a searchable text input dropdown of country names).

If guess is wrong:

Show directional arrow pointing from guessed country to actual country.

Show distance in miles between guessed and correct country.

Highlight guessed country on the globe with a heatmap color scale:

Red = closest to actual country

Orange = near

Yellow = moderate distance

Blue = far

User has 5 guesses max before the round ends.

On correct guess or after 5 attempts, reveal the correct country with name + location highlighted on globe.

3.2 UI Layout

Left side (Main game panel):

Country outline silhouette (SVG or Canvas).

Input box for country guesses (auto-complete dropdown).

Guess history list with results (country name, distance, direction, color-coded proximity).

Right side (Interactive Globe):

3D globe (Three.js or react-globe.gl).

Highlights guesses in heatmap colors.

Shows correct country once revealed.

3.3 Feedback System

Distance in miles between guess and answer.

Direction arrow (N, NE, E, SE, S, SW, W, NW).

Heatmap on globe for spatial learning.

3.4 Game Modes (Future Expansion)

Classic Mode: 5 guesses per country.

Timed Mode: Guess as many countries as possible in X minutes.

Streak Mode: Continue until you miss 3 times.

Difficulty levels:

Easy (bigger countries, more recognizable shapes).

Medium (random countries).

Hard (tiny island nations, no globe hints).

3.5 Fun Features / Enhancements

Daily Challenge: One shared country per day (like Wordle).

Leaderboard: Track streaks, accuracy, and fastest correct guesses.

Educational Pop-up: After reveal, show country facts (population, capital, flag).

Social Share: Share results with friends (“I guessed today’s country in 3 tries!”).

4. Technical Requirements
4.1 Frontend

Framework: Next.js (for SSR & static generation).

Language: TypeScript.

State Management: React hooks or Zustand/Recoil for game state.

Styling: Tailwind CSS for rapid UI development.

4.2 Data

Country outlines: GeoJSON / TopoJSON dataset (simplified borders).

Globe rendering: react-globe.gl (Three.js wrapper).

Distance calculation: Haversine formula (great-circle distance).

Direction calculation: Bearing formula (from guessed country centroid to correct country centroid).

4.3 Deployment

Hosted on Vercel (optimized for Next.js).

5. Success Metrics

Engagement: Avg. session length (3–5 minutes).

Retention: % of users returning for daily challenge.

Accuracy Improvement: Track if players improve over time (shorter average guesses).